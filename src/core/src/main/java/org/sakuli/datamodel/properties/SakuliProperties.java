/*
 * Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
 *
 * Copyright 2013 - 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.sakuli.datamodel.properties;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * @author tschneck Date: 09.05.14
 */
@Component
public class SakuliProperties extends AbstractProperties {

    public static final String SAKULI_PROPERTIES_FILE_APPENDER = File.separator + "sakuli.properties";
    public static final String INCLUDE_FOLDER = "sakuli.include.folder";
    public static final String SUPPRESS_RESUMED_EXCEPTIONS = "sakuli.exception.suppressResumedExceptions";
    public static final String LOG_FOLDER = "sakuli.log.folder";
    public static final String LOG_PATTERN = "sakuli.log.pattern";
    private static final boolean SUPPRESS_RESUMED_EXCEPTIONS_DEFAULT = false;
    @Value("${" + INCLUDE_FOLDER + "}")
    private String includeFolderPropertyValue;
    private Path includeFolder;
    @Value("${" + SUPPRESS_RESUMED_EXCEPTIONS + ":" + SUPPRESS_RESUMED_EXCEPTIONS_DEFAULT + "}")
    private boolean suppressResumedExceptions;
    @Value("${" + LOG_FOLDER + "}")
    private String logFolderPropertyValue;
    private Path logFolder;
    @Value("${" + LOG_PATTERN + "}")
    private String logPattern;

    @PostConstruct
    public void initFolders() throws FileNotFoundException {
        includeFolder = Paths.get(includeFolderPropertyValue).normalize();
        checkFolders(includeFolder);
        //need not to be checked, will be generated by the logger if it is missing
        logFolder = Paths.get(logFolderPropertyValue).normalize();
    }

    public String getIncludeFolderPropertyValue() {
        return includeFolderPropertyValue;
    }

    public void setIncludeFolderPropertyValue(String includeFolderPropertyValue) {
        this.includeFolderPropertyValue = includeFolderPropertyValue;
    }

    public Path getIncludeFolder() {
        return includeFolder;
    }

    public void setIncludeFolder(Path includeFolder) {
        this.includeFolder = includeFolder;
    }

    public boolean isSuppressResumedExceptions() {
        return suppressResumedExceptions;
    }

    public void setSuppressResumedExceptions(boolean suppressResumedExceptions) {
        this.suppressResumedExceptions = suppressResumedExceptions;
    }

    public String getLogFolderPropertyValue() {
        return logFolderPropertyValue;
    }

    public void setLogFolderPropertyValue(String logFolderPropertyValue) {
        this.logFolderPropertyValue = logFolderPropertyValue;
    }

    public Path getLogFolder() {
        return logFolder;
    }

    public void setLogFolder(Path logFolder) {
        this.logFolder = logFolder;
    }

    public String getLogPattern() {
        return logPattern;
    }

    public void setLogPattern(String logPattern) {
        this.logPattern = logPattern;
    }

}
