<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
  ~
  ~ Copyright 2013 - 2015 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.sakuli</groupId>
        <artifactId>sakuli-root</artifactId>
        <version>1.1.0-SNAPSHOT-241_sakuli_se</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>sakuli-sahi-setup</artifactId>
    <version>1.1.0-SNAPSHOT-241_sakuli_se</version>
    <name>${artifactId}</name>

    <description>module for all sahi based functionality</description>

    <packaging>jar</packaging>

    <properties>
        <project.jar.name>sakuli</project.jar.name>
        <sakuli.version.postfix>v${project.version}</sakuli.version.postfix>
        <sakuli.filename>${project.jar.name}-${sakuli.version.postfix}</sakuli.filename>
        <project.build.unpacked-resources>${project.build.directory}/unpacked-resources
        </project.build.unpacked-resources>
    </properties>

    <build>
        <finalName>${project.jar.name}</finalName>

        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <excludes>
                    <exclude>sahi/</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <!-- plugin for aspectj weaver to weave libraries -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>aspectj-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>compile</goal>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <complianceLevel>${maven.compiler.source}</complianceLevel>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.source}</target>
                    <weaveDependencies>
                        <weaveDependency>
                            <groupId>net.sf.sahi</groupId>
                            <artifactId>sahi</artifactId>
                        </weaveDependency>
                    </weaveDependencies>
                    <deprecation>true</deprecation>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <showWeaveInfo>true</showWeaveInfo>
                    <forceAjcCompile>true</forceAjcCompile>
                    <verbose>false</verbose>
                    <Xlint>ignore</Xlint>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
            </plugin>

            <!-- unpack sahi to include into the zip assembly -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-sahi-zip</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.unpacked-resources}</outputDirectory>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>net.sf.sahi</groupId>
                                    <artifactId>sahi-install</artifactId>
                                    <version>${sahi.version}</version>
                                    <type>zip</type>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.sakuli</groupId>
                                    <artifactId>sakuli-common</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>org.sakuli</groupId>
                                    <artifactId>ocr-tessdata-extractor</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                    <!--Unpacks the config resources from the common module, e.g. for the twig templates,
                    to be able to load it via java.nio.Path method in unit tests-->
                    <execution>
                        <id>unpack-test-resources</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
                            <includes>**/common/config/**</includes>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.sakuli</groupId>
                                    <artifactId>sakuli-common</artifactId>
                                    <version>${project.version}</version>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- replace sahi prefs.js with custom file -->
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-custom-sahi-config-files</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/main/resources/sahi</directory>
                                </resource>
                            </resources>
                            <overwrite>true</overwrite>
                            <encoding>UTF-8</encoding>
                            <outputDirectory>${project.build.unpacked-resources}/sahi</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- assemply plugin to build the sakuli-zipped-release.zip file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <descriptors>
                        <!-- descriptor for the release build -->
                        <descriptor>descriptor_zip_release.xml</descriptor>
                    </descriptors>
                    <outputDirectory>${project.build.directory}/install</outputDirectory>
                    <finalName>sakuli</finalName>
                    <recompressZippedFiles>true</recompressZippedFiles>
                    <ignorePermissions>true</ignorePermissions>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <!-- this is used for inheritance merges -->
                        <phase>install</phase>
                        <!-- bind to the install phase -->
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <id>attach-zip-artifact</id>
                        <phase>install</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${project.version}</version>
                            <packaging>zip</packaging>
                            <file>${project.build.directory}/install/${sakuli.filename}.zip</file>
                            <createChecksum>true</createChecksum>
                            <generatePom>true</generatePom>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <!--profil to deploy the zip file to labs.consol.de/sakuli/install-->
        <profile>
            <id>upload</id>
            <activation>
                <property>
                    <name>performRelease</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <!-- wagon plugin to upload the zipped releases to the labs server -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>wagon-maven-plugin</artifactId>
                        <configuration>
                            <serverId>labs-consol-sakuli-install</serverId>
                            <url>scpexe://sakuli@labs.consol.de/</url>
                        </configuration>
                        <executions>
                            <execution>
                                <id>upload-install</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>upload</goal>
                                </goals>
                                <configuration>
                                    <fromDir>${project.build.directory}/install</fromDir>
                                    <includes>*.zip</includes>
                                    <toDir>/home/sakuli/htdocs/install</toDir>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- plugins for source and java-doc files -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <version>2.4</version>
                        <executions>
                            <execution>
                                <id>attach-sources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar-no-fork</goal>
                                </goals>
                                <configuration>
                                    <finalName>${project.jar.name}</finalName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <configuration>
                            <finalName>${project.jar.name}</finalName>
                        </configuration>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>sakuli-core</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!--&lt;!&ndash; Spring Libraries &ndash;&gt;
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        &lt;!&ndash; Spring JDBC&ndash;&gt;
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        &lt;!&ndash;Aspect libaries &ndash;&gt;
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
        </dependency>
        &lt;!&ndash; JavaConfig need this library &ndash;&gt;
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
        </dependency>

        &lt;!&ndash;MySQL Driver for DB Access &ndash;&gt;
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>

        &lt;!&ndash; LOGGING  over maven central &ndash;&gt;
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
        </dependency>

        &lt;!&ndash; will rout the system out from sikulX to logging over slf4j &ndash;&gt;
        <dependency>
            <groupId>uk.org.lidalia</groupId>
            <artifactId>sysout-over-slf4j</artifactId>
        </dependency>


        &lt;!&ndash; Command line tool & some common libraries &ndash;&gt;
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        &lt;!&ndash; Sahi Library (OpenSource Version)&ndash;&gt;
        &lt;!&ndash; local libaries, included with 'install_local_lib.sh' ... the are still not available over maven central &ndash;&gt;
        <dependency>
            <groupId>net.sf.sahi</groupId>
            <artifactId>sahi</artifactId>
        </dependency>

        <dependency>
            <groupId>net.sf.sahi</groupId>
            <artifactId>ant-sahi</artifactId>
        </dependency>

        &lt;!&ndash; Sahi API Dependencies&ndash;&gt;
        <dependency>
            <groupId>org.mozilla</groupId>
            <artifactId>rhino</artifactId>
        </dependency>

        &lt;!&ndash; SikuliX-Java Library (FULL LIBRARY) - is part of the  sikuli-setup.jar&ndash;&gt;
        &lt;!&ndash; well be needed for Functions like App() and so on...&ndash;&gt;
        <dependency>
            <groupId>com.sikulix</groupId>
            <artifactId>sikulixapi</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sikulix</groupId>
            <artifactId>sikulixlibslux</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sikulix</groupId>
            <artifactId>sikulixlibsmac</artifactId>
        </dependency>
        <dependency>
            <groupId>com.sikulix</groupId>
            <artifactId>sikulixlibswin</artifactId>
        </dependency>
        <dependency>
            <groupId>org.gearman</groupId>
            <artifactId>gearman-java</artifactId>
        </dependency>

        &lt;!&ndash; JAX-RS 2 client &ndash;&gt;
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        &lt;!&ndash; jackson json parser &ndash;&gt;
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>

        &lt;!&ndash; jtwig template engine &ndash;&gt;
        <dependency>
            <groupId>org.jtwig</groupId>
            <artifactId>jtwig-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jtwig</groupId>
            <artifactId>jtwig-spaceless-extension</artifactId>
        </dependency>-->
    </dependencies>

</project>
