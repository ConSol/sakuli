#
# Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
#
# Copyright 2013 - 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#####################################################################################
#######################################################################################
# All properties defined here are DEFAULT and should NOT be CHANGED.
#
# To define a specific behaviour to your test, it is possible to overwrite all properties of the Sakuli default
# properties 'sakuli-default.properties'.
# For a short guideline how the property replacement mechanism in Sakuli works and how properties should be
# overwritten, please refer to https://github.com/ConSol/sakuli/blob/master/docs/additional-settings.md
#######################################################################################
#######################################################################################



#######################################################################################
# TEST-SUITE-META-PROPERTIES
#
# These properties describes the set of configuration for a test suite.
#######################################################################################

# The test suite ID is an unique ID, which identifies the same test suite
# over all executions and configuration changes.
# The 'testsuite.id' MUST be defined in the 'testsuite.properties'
testsuite.id=

#######################################################################################
# OPTIONAL-PROPERTIES for the test suite
#
# If this properties haven NOT been set, the test suite will be configured with the
# default values.
#######################################################################################

# Descriptive name for the current test suite
# DEFAULT: value of 'testsuite.id'
testsuite.name=

# The warning runtime threshold (seconds) estimates the execution time of the complete
# test suite. If the warning time is exceeded, the test suite will get the state
# 'WARNING'.
# If the threshold is set to 0, the execution time will never exceed, so the state will be always OK!
# DEFAULT:0
testsuite.warningTime=0

# The critical runtime threshold (seconds) estimates the execution time of the complete
# test suite. If the critical time is exceeded, the test suite will get the state
# 'CRITICAL'.
# If the threshold is set to 0, the execution time will never exceed, so the state will be always OK!
# DEFAULT:0
testsuite.criticalTime=0

# Defines the browser in witch the test suite should be executed
# values are corresponding to the file
# <sahi-installtion-folder>/userdata/config/browser_types.
#
# DEFAULT: firefox
testsuite.browser=firefox




#######################################################################################
# SAKULI-ACTION-PROPERTIES
#
# Common settings
#######################################################################################


# Similarity is taken as a "higher-than" value, that means for a match candidate region that more than
#'sakuli.region.similarity.default' percent of the region's pixels must coincide. Decreasing this value should only be
# necessary if the pattern images are of poor quality or the screen always differs slightly from the pattern images
# (e.g. compression of remote sessions like vnc).
#
# DEFAULT: true
sakuli.environment.similarity.default=0.99

# If true, the test suite takes screenshots when an error occurs during the execution.
#
# DEFAULT: true
sakuli.screenshot.onError=true

### If true, every region gets highlighted automatically
# en-/disable
#
# DEFAULT: false
sakuli.autoHighlight.enabled=false

# Auto highlight duration (float)
#
# DEFAULT: 1.1f
sakuli.highlight.seconds=1.1f

### Sikuli Action Delays
#
#set the default type and click delay in seconds;
sikuli.typeDelay=0.00
sikuli.clickDelay=0.2


### Encryption Interface Settings
# If this property is enabled, Sakuli will choose automatically the first ethernet interface for encryption.
# To use a specific interface set it to 'false'
#
# DEFAULT:true
sakuli.encryption.interface.autodetect=true
#
# Defines a specific network interface which should be used for the encryption functions.
# Therefore set the property 'sakuli.encryption.interface.autodetect=false'.
#
# Example: sakuli.encryption.interface=eth0
sakuli.encryption.interface=

#######################################################################################
# FORWARDER-PROPERTIES
#
# Defines the properties for all forwarders. Currently supported: JDBC, Gearman/mod-gearman, Icinga, CheckMK.
#######################################################################################

# Set the default folder, where the Twig templates for the different forwarders are placed
# (e.g. the Check_MK templates are placed in a subdirectory check_mk).
# For more information about twig templates, please refer to http://jtwig.org/
sakuli.forwarder.template.folder=${sakuli.home.folder}/config/templates

##### GEARMAN - FORWARDER
# Send results to a gearman-enabled monitoring system, using the parameters below in your 'sakuli.properties' to activate the forwarder.
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/forwarder-gearman.md
#
## Gearman server settings:
# DEFAULT: false
sakuli.forwarder.gearman.enabled=false
sakuli.forwarder.gearman.server.host=changeme
# DEFAULT: 4730
sakuli.forwarder.gearman.server.port=4730
# Nagios host where all Sakuli services are defined on. If necessary, overwrite this value per test suite.
sakuli.forwarder.gearman.nagios.hostname=changeme
#
#
### OPTIONAL GEARMAN PROPERTIES:
# DEFAULT: check_results
sakuli.forwarder.gearman.server.queue=check_results
#
## Encryption:
# For serverside configuration see https://labs.consol.de/de/nagios/mod-gearman/index.html.
sakuli.forwarder.gearman.encryption=false
sakuli.forwarder.gearman.secret.key=changeme
#
## Result caching:
# Caches results when gearman server is temporarily not available.
sakuli.forwarder.gearman.cache.enabled=true
# Time in milliseconds to wait between result job submit (used when processing cached results)
sakuli.forwarder.gearman.job.interval=1000
#
## Nagios service options:
# check_command gets appended to the perfdata string and will be used as PNP template name (check_sakuli = default)
sakuli.forwarder.gearman.nagios.check_command=check_sakuli
# optional service description forwarded to nagios check result. DEFAULT: testsuite.id
sakuli.forwarder.gearman.nagios.service_description=${testsuite.id}
#
## Result template:
# Output message template strings. Change only if needed.
sakuli.forwarder.gearman.nagios.template.suite.summary={{state_short}} Sakuli suite "{{id}}" {{suite_summary}}. (Last suite run: {{stop_date}})
sakuli.forwarder.gearman.nagios.template.suite.summary.maxLength=200
sakuli.forwarder.gearman.nagios.template.suite.table={{state_short}} Sakuli suite "{{id}}" {{suite_summary}}. (Last suite run: {{stop_date}}){{error_screenshot}}
sakuli.forwarder.gearman.nagios.template.case.ok={{state_short}} case "{{id}}" ran in {{duration}}s - {{state_description}}
sakuli.forwarder.gearman.nagios.template.case.warning={{state_short}} case "{{id}}" over runtime ({{duration}}s/warn at {{warning_threshold}}s){{step_information}}
sakuli.forwarder.gearman.nagios.template.case.warningInStep={{state_short}} case "{{id}}" over runtime ({{duration}}s/warn at {{warning_threshold}}s){{step_information}}
sakuli.forwarder.gearman.nagios.template.case.critical={{state_short}} case "{{id}}" over runtime ({{duration}}s/crit at {{critical_threshold}}s){{step_information}}
sakuli.forwarder.gearman.nagios.template.case.error={{state_short}} case "{{id}}" {{state_description}}: {{error_message}}{{error_screenshot}}
## Screenshot dimensions in Gearman output
sakuli.forwarder.gearman.nagios.template.screenshotDivWidth=640px


##### ICINGA2 - FORWARDER
# Send results to a Icinga2 monitoring system, using the parameters below in your 'sakuli.properties' to activate the forwarder.
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/forwarder/icinga2.md
#
# DEFAULT: false
sakuli.forwarder.icinga2.enabled=false
## Icinga API settings
sakuli.forwarder.icinga2.api.host=changeme
sakuli.forwarder.icinga2.api.port=5665
sakuli.forwarder.icinga2.api.username=icinga-api-user
sakuli.forwarder.icinga2.api.password=icinga-api-password
# Icinga host with sakuli services
sakuli.forwarder.icinga2.hostname=changeme
#
### OPTIONAL ICINGA2 PROPERTIES:
# Icinga service description. DEFAULT: testsuite.id
sakuli.forwarder.icinga2.service_description=${testsuite.id}
# REST-URL where to send the Icinga2 results
sakuli.forwarder.icinga2.api.url=https://${sakuli.forwarder.icinga2.api.host}:${sakuli.forwarder.icinga2.api.port}/v1/actions/process-check-result?service=${sakuli.forwarder.icinga2.hostname}!${sakuli.forwarder.icinga2.service_description}
#
## Result template:
#Icinga 'plugin_output' template strings. Change only if needed.
sakuli.forwarder.icinga2.template.suite.summary={{state_short}} Sakuli suite "{{id}}" {{suite_summary}}. (Last suite run: {{stop_date}})
sakuli.forwarder.icinga2.template.suite.summary.maxLength=200
sakuli.forwarder.icinga2.template.case.ok={{state_short}} case "{{id}}" ran in {{duration}}s - {{state_description}}
sakuli.forwarder.icinga2.template.case.warning={{state_short}} case "{{id}}" over runtime ({{duration}}s/warn at {{warning_threshold}}s){{step_information}}
sakuli.forwarder.icinga2.template.case.warningInStep={{state_short}} case "{{id}}" over runtime ({{duration}}s/warn at {{warning_threshold}}s){{step_information}}
sakuli.forwarder.icinga2.template.case.critical={{state_short}} case "{{id}}" over runtime ({{duration}}s/crit at {{critical_threshold}}s){{step_information}}
sakuli.forwarder.icinga2.template.case.error={{state_short}} case "{{id}}" {{state_description}}: {{error_message}}


##### DATABASE - FORWARDER
# Save results into database, using the DB connection parameters below (must be uncommented).
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/receivers/database.md

# DEFAULT: false
sakuli.forwarder.database.enabled=false
## database host
sakuli.forwarder.database.host=changeme
## database port:
sakuli.forwarder.database.port=3306
## database name
sakuli.forwarder.database=sakuli
## database username
sakuli.forwarder.database.user=sakuli
## database password
sakuli.forwarder.database.password=sakuli
## JDBC-Driver
sakuli.forwarder.database.jdbc.driverClass=com.mysql.jdbc.Driver
## pattern for JDBC database connection URL
sakuli.forwarder.database.jdbc.url=jdbc:mysql://${sakuli.forwarder.database.host}:${sakuli.forwarder.database.port}/${sakuli.forwarder.database}


##### CheckMK - FORWARDER
# Send results to a CheckMK-enabled monitoring system, using the parameters below in your 'sakuli.properties' to activate the forwarder.
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/forwarder-checkmk.md
#
## DEFAULT: false
sakuli.forwarder.check_mk.enabled=false
#
### OPTIONAL CheckMK PROPERTIES:
#
# spool dir, default /var/lib/check_mk_agent/spool (Linux) / (installation_path)\spool (Windows)
sakuli.forwarder.check_mk.spooldir=/var/lib/check_mk_agent/spool
#  Max result age. Prepend this number on the file name, e.g. 600_sakuli_suite_XYZ
sakuli.forwarder.check_mk.freshness=600
# Prefix of the file name for CheckMK
sakuli.forwarder.check_mk.spoolfile_prefix=sakuli_suite_
# optional service description forwarded to the output check result, when not set, testsuite.id is used
sakuli.forwarder.check_mk.service_description=${testsuite.id}

###############################
# LOGGING & ERROR-SCREENSHOT PROPERTIES
# Common logging settings for Sakuli.
# (log verbosity can be set in 'sakuli-log-config.xml')
###############################

### Specific Logging properties for different logging levels
#
### log levels for the different components - levels `DEBUG - INFO - WARN - ERROR`
#logging level for Sakuli output
log.level.sakuli=INFO
#logging level for Sikuli output
log.level.sikuli=WARN
#logging level for Sahi output
log.level.sahi=WARN
#logging level for the Spring framework (only used internally)
log.level.spring=WARN
#logging level for all other **Java classes and libraries**
log.level.root=INFO

# If you use the argument 'resumeOnException=true' in methods like `new Region("username",true)`
# to continue the test even the method fails, you can control how Sakuli treats such exceptions by
# settings the property `suppressResumedExceptions`: 
#   true  = the exception will be logged and appear in the test result
#   false = the exception will NEITHER be logged NOR appear in the test result. 
# 
# Example:
#              // create region "foo"
#              var foo = new Region("bar.png",true);
#              // if "image" is not found, the script will resume
#              var baz = foo.find("image");
#              // throw your "own" exception. 
#              // If you do not, and suppressResumedExceptions=true, the exception will be suppressed.
#              if (baz == null){
#                  throw "Sorry, I could not find image 'image'.";
#              }
#
# DEFAULT: false
sakuli.exception.suppressResumedExceptions=false

# Log pattern 
#
# Log pattern for development with java classes:
# sakuli.log.pattern=%-5level %d{YYYY-MM-dd HH:mm:ss.SSS} [%thread]  %logger{36} - %msg%n

# default log pattern
sakuli.log.pattern= %-5level [%d{YYYY-MM-dd HH:mm:ss.SSS}] - %msg%n

# log file folder
sakuli.log.folder=${sakuli.testsuite.folder}/_logs

# Deletes all files that are older than the defined days in the folder `sakuli.log.folder`
#
# DEFAULT: 14 days
sakuli.log.maxAge=14

# folder for screenshot files (if activated)
sakuli.screenshot.dir=${sakuli.log.folder}/_screenshots

# screenshot file format (Possible values: jpg, png)
sakuli.screenshot.format=jpg


#######################################################################################
# SAHI-SCRIPT-RUNNER-PROPERTIES
#
# Defines properties of the application component "Sahi". 
#######################################################################################
### Internal Sahi-Proxy configuration 
# sahi proxy port
#(internal proxy for the test execution)
sahi.proxy.port=9999
# Sahi installation folder
sahi.proxy.homePath=${sakuli.home.folder}/../sahi
# Sahi config folder
sahi.proxy.configurationPath=${sahi.proxy.homePath}/userdata

# number of max. attempts to connect to a site before aborting
sahi.proxy.maxConnectTries=25
# wait time in seconds between retry attempts
sahi.proxy.reconnectSeconds=1


# Sahi delays on Sikuli input (put on helmet!)
#
# Sikuli keyboard events (type/paste) on a Sahi-controlled browser instance can get lost if
# they are executed at the same time when Sahi internal status requests are sent from the 
# browser JS to the Sahi proxy (default: 100ms = 10x per sec.).
# For this reason, Sakuli can temporarily stop the browser JS with the Sahi proxy when a Sikuli 
# keyboard action has to be executed on the browser window. 
#
# "delayPerKey" is the amount of time the browser JS keeps silent for one key event; for e.g. a 
# word with 8 characters, this is "8 x delayPerKey" (in ms). 
#
# "delayBeforeInput" is the time Sakuli must wait before starting the keystrokes. Within this time
# the browser JS updates its sync interval from default (100ms) to e.g. "8 x delayPerKey". 
#
# After the key events are done, Sakuli resets Sahi's sync interval back to the default value. 
# This setting is not needed if key events are executed on a Window which is not contolled by Sahi.
#
# (gets only enabled if delayPerKey is set)
sahi.proxy.onSikuliInput.delayBeforeInput=500
sahi.proxy.onSikuliInput.delayPerKey=

### HTTP/HTTPS proxy Settings
### Set a company proxy Sahi should use
# external HTTP proxy 
ext.http.proxy.enable=false
ext.http.proxy.host=proxy.server.com
ext.http.proxy.port=8080
ext.http.proxy.auth.enable=false
ext.http.proxy.auth.name=user
ext.http.proxy.auth.password=password
# external HTTPS proxy 
ext.https.proxy.enable=false
ext.https.proxy.host=proxy.server.com
ext.https.proxy.port=8080
ext.https.proxy.auth.enable=false
ext.https.proxy.auth.name=user
ext.https.proxy.auth.password=password
# There is only one bypass list for both secure and insecure.
ext.http.both.proxy.bypass_hosts=localhost|127.0.0.1|*.internaldomain.com|www.verisign.com


### SSL-Certficate settings (experimental)
# Uncomment the following lines to use a client certificate.
# If there is no password, do not uncomment the password line.
# keystore type can be JKS, PKCS12 etc.
# For more information see http://community.sahipro.com/forums/discussion/1167/sahi-allowing-certificates
#
#ssl.client.keystore.type=JKS
#ssl.client.cert.path=${sakuli.testsuite.folder}/sakuli_keystore
#ssl.client.cert.password=sakuli

#
# log folder for sahi hmtl report
logs.dir=${sakuli.log.folder}
# handlers to create in the root logger
# (all loggers are children of the root logger)
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

# default logging level for new ConsoleHandler instances
java.util.logging.ConsoleHandler.level = ALL

# default logging level for new FileHandler instances
java.util.logging.FileHandler.level = ALL

# default formatter for new ConsoleHandler instances
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.FileHandler.limit=102400
java.util.logging.FileHandler.count=10
java.util.logging.FileHandler.pattern=%t/sahi%g.log
