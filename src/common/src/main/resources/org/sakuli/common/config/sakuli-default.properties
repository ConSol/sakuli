#
# Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
#
# Copyright 2013 - 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#######################################################################################
#######################################################################################
# All properties defined here are DEFAULT and should NOT be CHANGED. 
# You can override properties
#
#    as a global testsuite property:
#       file: test-suites-folder/sakuli.properties 
#       -> valid for all test suites within this folder
#    as a testsuite property:
#       file: test-suites-folder/test-suite/testsuite.properties 
#       -> valid for a test suite and its cases
#    as a Java VM option -Dsakuli.property.key=value:
#       appended to the Sakuli starter sakuli.sh / sakuli.bat 
#       -> valid only at runtime
#
#######################################################################################



#######################################################################################
# TEST-SUITE-META-PROPERTIES
#
# These properties describes the set of configuration for a test suite.
#######################################################################################

# The test suite ID is a unique ID, which identifies the same test suite
# over all executions and configuration changes.
# The 'testsuite.id' MUST be defined in the 'testsuite.properties'
testsuite.id=

#######################################################################################
# OPTIONAL-PROPERTIES for the test suite
#
# If this properties haven NOT been set, the test suite will be configured with the
# default values.
#######################################################################################

# Descriptive name for the current test suite
# DEFAULT: value of 'testsuite.id'
testsuite.name=

# The warning runtime threshold (seconds) estimates the execution time of the complete
# test suite. If the warning time is exceeded, the test suite will get the state
# 'WARNING'.
# If the threshold is set to 0, the execution time will never exceed, so the state will be always OK!
# DEFAULT:0
testsuite.warningTime=0

# The critical runtime threshold (seconds) estimates the execution time of the complete
# test suite. If the critical time is exceeded, the test suite will get the state
# 'CRITICAL'.
# If the threshold is set to 0, the execution time will never exceed, so the state will be always OK!
# DEFAULT:0
testsuite.criticalTime=0

# Defines the browser in witch the test suite should be executed
# values are corresponding to the file
# <sahi-installtion-folder>/userdata/config/browser_types.
#
# DEFAULT: firefox
testsuite.browser=firefox




#######################################################################################
# SAKULI-ACTION-PROPERTIES
#
# Common settings
#######################################################################################

# If true, the test suite takes screenshots when an error occurs during the execution.
#
# DEFAULT: true
sakuli.screenshot.onError=true

### If true, every region gets highlighted automatically
# en-/disable
#
# DEFAULT: false
sakuli.autoHighlight.enabled=false

# Auto highlight duration (float)
#
# DEFAULT: 1.1f
sakuli.highlight.seconds=1.1f

### Sikuli Action Delays
#
#set the default type and click delay in seconds;
sikuli.typeDelay=0.00
sikuli.clickDelay=0.2


### Encryption Interface Settings
# If this property is enabled, Sakuli will choose automatically the first ethernet interface for encryption.
# To use a specific interface set it to 'false'
#
# DEFAULT:true
sakuli.encryption.interface.autodetect=true
#
# Defines a specific network interface which should be used for the encryption functions.
# Therefore set the property 'sakuli.encryption.interface.autodetect=false'.
#
# Example: sakuli.encryption.interface=eth0
sakuli.encryption.interface=

#######################################################################################
# FORWARDER-PROPERTIES
#
# Defines the properties for all forwarders. Currently supported: JDBC & Gearman/mod-gearman.
#######################################################################################

##### GEARMAN - FORWARDER
# Send results to a gearman-enabled monitoring system, using the parameters below (must be uncommented).
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/forwarder/gearman.md

# DEFAULT: false
sakuli.forwarder.gearman.enabled=false
#
## gearman server settings
sakuli.forwarder.gearman.server.host=changeme
# 4730 = default port
sakuli.forwarder.gearman.server.port=4730
# check_results = default queue
sakuli.forwarder.gearman.server.queue=check_results
#
# Nagios host where all Sakuli services are defined on. If neccessary, override this value per test suite. 
# (Nagios service name is defined by testsuite.properties -> suiteID)
sakuli.forwarder.gearman.nagios.hostname=changeme
# check_command gets appended to the perfdata string and will be used as PNP template name (check_sakuli = default)
sakuli.forwarder.gearman.nagios.check_command=check_sakuli
## Output message format strings. Change only if needed. 
sakuli.forwarder.gearman.nagios.output.suite.summary= {{state}} - {{state_short}} Sakuli suite "{{id}}" ran in {{duration}} seconds - {{suite_summary}}. (Last suite run: {{stop_date}})
sakuli.forwarder.gearman.nagios.output.suite.table={{state_short}} Sakuli suite "{{id}}" ran in {{duration}} seconds - {{suite_summary}}. (Last suite run: {{stop_date}}){{error_screenshot}}
sakuli.forwarder.gearman.nagios.output.case.ok={{state_short}} case "{{id}}" ran in {{duration}}s - {{state_description}}
sakuli.forwarder.gearman.nagios.output.case.warning={{state_short}} case "{{id}}" over runtime ({{duration}}s /{{state_description}} at {{warning_threshold}}s){{step_information}}
sakuli.forwarder.gearman.nagios.output.case.critical={{state_short}} case "{{id}}" over runtime ({{duration}}s /{{state_description}} at {{critical_threshold}}s){{step_information}}
sakuli.forwarder.gearman.nagios.output.case.error={{state_short}} case "{{id}}" {{state_description}}: {{error_message}}{{error_screenshot}}
#
## Screenshot dimensions in Gearman output
sakuli.forwarder.gearman.nagios.output.screenshotDivWidth=640px


##### DATABASE - FORWARDER
# Save results into database, using the DB connection parameters below (must be uncommented).
# For more information see https://github.com/ConSol/sakuli/blob/master/docs/receivers/database.md

# DEFAULT: false
sakuli.forwarder.database.enabled=false
#
## JDBC-Driver
jdbc.driverClass=com.mysql.jdbc.Driver
## database host
jdbc.host=changeme
## database port:
jdbc.port=3306
## database name
jdbc.database=sakuli
## database username
jdbc.user=sakuli
## database password
jdbc.pw=sakuli
## pattern for JDBC database connection URL
jdbc.url=jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database}




###############################
# LOGGING & ERROR-SCREENSHOT PROPERTIES
# Common logging settings for Sakuli.
# (log verbosity can be set in 'sakuli-log-config.xml')
###############################

### Specific Logging properties for different logging levels
#
### log levels for the different components - levels `DEBUG - INFO - WARN - ERROR`
#logging level for Sakuli output
log.level.sakuli=INFO
#logging level for Sikuli output
log.level.sikuli=WARN
#logging level for Sahi output
log.level.sahi=WARN
#logging level for the Spring framework (only used internally)
log.level.spring=WARN
#logging level for all other **Java classes and libraries**
log.level.root=INFO

# If you use the argument 'resumeOnException=true' in methods like `new Region("username",true)`
# to continue the test even the method fails, you can control how Sakuli treats such exceptions by
# settings the property `suppressResumedExceptions`: 
#   true  = the exception will be logged and appear in the test result
#   false = the exception will NEITHER be logged NOR appear in the test result. 
# 
# Example:
#              // create region "foo"
#              var foo = new Region("bar.png",true);
#              // if "image" is not found, the script will resume
#              var baz = foo.find("image");
#              // throw your "own" exception. 
#              // If you do not, and suppressResumedExceptions=true, the exception will be suppressed.
#              if (baz == null){
#                  throw "Sorry, I could not find image 'image'.";
#              }
#
# DEFAULT: false
sakuli.exception.suppressResumedExceptions=false

# Log pattern 
#
# Log pattern for development with java classes:
# sakuli.log.pattern=%-5level %d{YYYY-MM-dd HH:mm:ss.SSS} [%thread]  %logger{36} - %msg%n

# default log pattern
sakuli.log.pattern= %-5level [%d{YYYY-MM-dd HH:mm:ss.SSS}] - %msg%n

# log file folder
sakuli.log.folder=${sakuli.testsuite.folder}/_logs

# Deletes all files that are older than the defined days in the folder `sakuli.log.folder`
#
# DEFAULT: 14 days
sakuli.log.maxAge=14

# folder for screenshot files (if activated)
sakuli.screenshot.dir=${sakuli.log.folder}/_screenshots

# screenshot file format (Possible values: jpg, png)
sakuli.screenshot.format=jpg


#######################################################################################
# SAHI-SCRIPT-RUNNER-PROPERTIES
#
# Defines properties of the application component "Sahi". 
#######################################################################################
### Internal Sahi-Proxy configuration 
# sahi proxy port
#(internal proxy for the test execution)
sahi.proxy.port=9999
# Sahi installation folder
sahi.proxy.homePath=${sakuli.home.folder}/../sahi
# Sahi config folder
sahi.proxy.configurationPath=${sahi.proxy.homePath}/userdata

# number of max. attempts to connect to a site before aborting
sahi.proxy.maxConnectTries=1
# wait time in seconds between retry attempts
sahi.proxy.reconnectSeconds=25


# Sahi delays on Sikuli input (put on helmet!)
#
# Sikuli keyboard events (type/paste) on a Sahi-controlled browser instance can get lost if
# they are executed at the same time when Sahi internal status requests are sent from the 
# browser JS to the Sahi proxy (default: 100ms = 10x per sec.).
# For this reason, Sakuli can temporarily stop the browser JS with the Sahi proxy when a Sikuli 
# keyboard action has to be executed on the browser window. 
#
# "delayPerKey" is the amount of time the browser JS keeps silent for one key event; for e.g. a 
# word with 8 characters, this is "8 x delayPerKey" (in ms). 
#
# "delayBeforeInput" is the time Sakuli must wait before starting the keystrokes. Within this time
# the browser JS updates its sync interval from default (100ms) to e.g. "8 x delayPerKey". 
#
# After the key events are done, Sakuli resets Sahi's sync interval back to the default value. 
# This setting is not needed if key events are executed on a Window which is not contolled by Sahi.
#
# (gets only enabled if delayPerKey is set)
sahi.proxy.onSikuliInput.delayBeforeInput=500
sahi.proxy.onSikuliInput.delayPerKey=

### HTTP/HTTPS proxy Settings
### Set a company proxy Sahi should use
# external HTTP proxy 
ext.http.proxy.enable=false
ext.http.proxy.host=proxy.server.com
ext.http.proxy.port=8080
ext.http.proxy.auth.enable=false
ext.http.proxy.auth.name=user
ext.http.proxy.auth.password=password
# external HTTPS proxy 
ext.https.proxy.enable=false
ext.https.proxy.host=proxy.server.com
ext.https.proxy.port=8080
ext.https.proxy.auth.enable=false
ext.https.proxy.auth.name=user
ext.https.proxy.auth.password=password
# There is only one bypass list for both secure and insecure.
ext.http.both.proxy.bypass_hosts=localhost|127.0.0.1|*.internaldomain.com|www.verisign.com


### SSL-Certficate settings (experimental)
# Uncomment the following lines to use a client certificate.
# If there is no password, do not uncomment the password line.
# keystore type can be JKS, PKCS12 etc.
# For more information see http://community.sahipro.com/forums/discussion/1167/sahi-allowing-certificates
#
#ssl.client.keystore.type=JKS
#ssl.client.cert.path=${sakuli.testsuite.folder}/sakuli_keystore
#ssl.client.cert.password=sakuli

#
# log folder for sahi hmtl report
logs.dir=${sakuli.log.folder}
# handlers to create in the root logger
# (all loggers are children of the root logger)
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

# default logging level for new ConsoleHandler instances
java.util.logging.ConsoleHandler.level = ALL

# default logging level for new FileHandler instances
java.util.logging.FileHandler.level = ALL

# default formatter for new ConsoleHandler instances
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.FileHandler.limit=102400
java.util.logging.FileHandler.count=10
java.util.logging.FileHandler.pattern=%t/sahi%g.log
