#
# Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
#
# Copyright 2013 - 2014 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#######################################################################################
#######################################################################################
# SAKULI-PROPERTIES-FILE
#
# In the following file you can configure all of default settings. This settings will
# be valid for all test suites of these Sakuli installation. Each single property can
# be overridden in the property file 'testsuite.properties' in the single test suite
# folders.
#######################################################################################



#######################################################################################
# TEST-SUITE-BEHAVIOR-PROPERTIES
#
# Set here the common behavior settings for the test suite.
#######################################################################################

# Defines the browser in witch the test suite should be executed
# values are corresponding to the file
# <sahi-installtion-folder>/userdata/config/browser_types.xml
#
# DEFAULT: firefox
testsuite.browser=firefox




#######################################################################################
# SAKULI-ACTION-PROPERTIES
#
# Set here the common settings for the behavior of
# the sakuli actions during the execution.
#######################################################################################

# If true, the test suite takes screenshots when an error occurs during the execution.
#
# DEFAULT: true
sakuli.takeScreenShots.onErrors=true

### Controls the default automatic highlighting feature
# en-/disable
#
# DEFAULT: false
sakuli.autoHighlight.enabled=false

# time in seconds for highlighting (float)
#
# DEFAULT: 1.1f
sakuli.autoHighlight.seconds=1.1f

### Screenbased Action Delays
#
#set the default type and click delay in seconds;
sakuli.screenbased.typeDelay=0.05
sakuli.screenbased.clickDelay=0.2


### Encryption Interface Settings
# Defines the network interface for which should be used for the encryption functions.
sakuli.encryption.interface=eth0
# Enable the TEST-MODE for cipher encryption. You can also enable this, if you don't
# want to use the encryption feature.
#
# DEFAULT:false
sakuli.encryption.interface.testmode=false



#######################################################################################
# RECEIVER-PROPERTIES
#
# Defines the properties for all receivers. Actually sakuli supports jdbc databases and
# gearman result queues.
#######################################################################################

##### GEARMAN - RECEIVER
#  En- / Disables if the results should be send to the specified gearman queue.
# (This had to defined at the nagios server before)
# DEFAULT: false
sakuli.receiver.gearman.enabled=false
#
## gearman connection settings
#sakuli.receiver.gearman.server.host=gearman-server-host
#sakuli.receiver.gearman.server.port=4730
#sakuli.receiver.gearman.server.queue=check_results
#
## settings for the nagios check
#sakuli.receiver.gearman.nagios.hostname=sakuli-test-client
#sakuli.receiver.gearman.nagios.check_command=check_sakuli_db_suite
#
## configuration for the different out put messages. For more information see therefor "docs/receivers/gearman.md
sakuli.receiver.gearman.nagios.output.suite.summary= {{state}} - {{state_short}} Sakuli suite "{{id}}" ran in {{duration}} seconds - {{suite_summary}}. (Last suite run: {{stop_date}})
sakuli.receiver.gearman.nagios.output.suite.table={{state_short}} Sakuli suite "{{id}}" ran in {{duration}} seconds - {{suite_summary}}. (Last suite run: {{stop_date}}){{error_screenshot}}
sakuli.receiver.gearman.nagios.output.case.ok={{state_short}} case "{{id}}" ran in {{duration}}s - {{state_description}}
sakuli.receiver.gearman.nagios.output.case.warning={{state_short}} case "{{id}}" over runtime ({{duration}}s /{{state_description}} at {{warning_threshold}}s) {{step_information}}
sakuli.receiver.gearman.nagios.output.case.critical={{state_short}} case "{{id}}" over runtime ({{duration}}s /{{state_description}} at {{critical_threshold}}s) {{step_information}}
sakuli.receiver.gearman.nagios.output.case.error={{state_short}} case "{{id}}" {{state_description}}: {{error_message}}{{error_screenshot}}
#
## configure the appearance of the gearman output
sakuli.receiver.gearman.nagios.output.screenshotDivWidth=640px


##### DATABASE - RECEIVER
# En- / Disables if the results should be saved in the specified database.
# If this flag is enabled, the above jdbc properties have to be defined as well.
# To initially build up the database see the file
# 'core/src/database_scripts/create_and_drop_database.sql'
#
# DEFAULT: false
sakuli.receiver.database.enabled=false
#
## Specifies the to JDBC-Driver
#jdbc.driverClass=com.mysql.jdbc.Driver
## host for the JDBC database
#jdbc.host=localhost
## JDBC-Database port:
#jdbc.port=3306
## name of the database
#jdbc.database=sakuli
## database username
#jdbc.user=sakuli
## database password
#jdbc.pw=sakuli
## pattern for JDBC database connection URL
#jdbc.url=jdbc:mysql://${jdbc.host}:${jdbc.port}/${jdbc.database}




###############################
# LOGGING & ERROR-SCREENSHOT PROPERTIES
# Set here the common logging settings for sakuli.
# To configure more details see the file 'sakuli-log-config.xml'
###############################

# If you use the feature resumeOnException, for example with 'new Region("foo",true), then you can config
# the exception logging like following: If
#   true  = Exception will appear in the log and on the test suite result
#   false = Exception will NOT appear in the log file and in the test suite result. In that case you
#           have to handle it by yourself in the test case, like in this example:
#            try{
#              var foo = fooRegion.find("image.png");
#              if (foo == null){
#                  throw "your custom exception message";
#              }
#            } catch (e) {
#              handleYourSelf(e);
#            }
#
# DEFAULT: true
sakuli.log.exception.onResumeOnException=true

# Log pattern for the logging output.
#
# Log pattern for development with java classes:
# sakuli.log.pattern=%-5level %d{YYYY-MM-dd HH:mm:ss.SSS} [%thread]  %logger{36} - %msg%n
sakuli.log.pattern= %-5level [%d{YYYY-MM-dd HH:mm:ss.SSS}] - %msg%n

# Sets the output folder for the log files
sakuli.log.folder=${sakuli.testsuite.folder}/_logs

# Sets the output folder for the error screenshots (if activated)
sakuli.screenshot.dir=${sakuli.log.folder}/_screenshots
# Output format for the take screenshots.
# Possible values: jpg, png
sakuli.screenshot.format=jpg
#sakuli.screenshot.format=png




#######################################################################################
# SAHI-SCRIPT-RUNNER-PROPERTIES
#
# Defines the location and the behavior of the underlying used Sahi application.
#######################################################################################
### Internal Sahi-Proxy configuration for the test execution
# port of the sahi proxy
#(internal proxy for the test execution)
sahi.proxy.port=9999
# Path to your default Sahi installation
sahi.proxy.homePath=${sakuli.include.folder}/../sahi
#Path to the config folder of the default Sahi installation
sahi.proxy.configurationPath=${sahi.proxy.homePath}/userdata

#Specifies, how often the sahi proxy should try to connect
sahi.proxy.maxConnectTries=5
#Specifies, the wait time in seconds for the retry
sahi.proxy.reconnectSeconds=5

# Specifies the interval in milliseconds, what should be applied when sikuli based input
# (like typing or clicking) is interacting with a Browser website.
# This setting only make sense, if your test does NOT use Sahi functions for controlling the
# testing website. This setting will prevent the test for losing some key or click events
# in case of blocking, synchronous sahi-interal status requests.
#
#sahi.proxy.requestDelayOnSikuliInput.delayTime=500
#
### refresh time for the sahi proxy to set the delay time
#sahi.proxy.requestDelayOnSikuliInput.refreshTime

### HTTP/HTTPS proxy Settings
### Set these properties, to enable the test execution behind company proxies
# Use external proxy server for HTTP
ext.http.proxy.enable=false
ext.http.proxy.host=proxy.server.com
ext.http.proxy.port=8080
ext.http.proxy.auth.enable=false
ext.http.proxy.auth.name=user
ext.http.proxy.auth.password=password
# Use external proxy server for HTTPS
ext.https.proxy.enable=false
ext.https.proxy.host=proxy.server.com
ext.https.proxy.port=8080
ext.https.proxy.auth.enable=false
ext.https.proxy.auth.name=user
ext.https.proxy.auth.password=password
# There is only one bypass list for both secure and insecure.
ext.http.both.proxy.bypass_hosts=localhost|127.0.0.1|*.internaldomain.com|www.verisign.com


### Specific Logging properties for the Sahi proxy
#
#log folder for sahi hmtl report
logs.dir=${sakuli.log.folder}
# Specify the handlers to create in the root logger
# (all loggers are children of the root logger)
handlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler

# Set the default logging level for new ConsoleHandler instances
java.util.logging.ConsoleHandler.level = ALL

# Set the default logging level for new FileHandler instances
java.util.logging.FileHandler.level = ALL

# Set the default formatter for new ConsoleHandler instances
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

java.util.logging.FileHandler.limit=102400
java.util.logging.FileHandler.count=10
java.util.logging.FileHandler.pattern=%t/sahi%g.log
