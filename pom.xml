<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Sakuli - Testing and Monitoring-Tool for Websites and common UIs.
  ~
  ~ Copyright 2013 - 2014 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>de.consol.sakuli</groupId>
    <artifactId>root</artifactId>
    <version>0.4.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>sakuli-parent</name>
    <description>Parent pom for the complete sakuli projekt.
        If you want to build a new zip-installer-file please run "mvn clean assembly:single",
        to build a new release see 'core/dev_stuff/how-to-release.md'
    </description>
    <url>http://maven.apache.org</url>

    <modules>
        <module>core</module>
        <module>integration-test</module>
        <module>docs</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.build.outputEncoding>UTF-8</project.build.outputEncoding>
        <downloadSources>true</downloadSources>
        <downloadJavadocs>true</downloadJavadocs>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
        <dependencies.spring.version>4.0.3.RELEASE</dependencies.spring.version>
        <dependencies.aspectj.version>1.7.4</dependencies.aspectj.version>
        <dependencies.testng.version>6.8.8</dependencies.testng.version>
        <test.group.integration>integration</test.group.integration>
        <test.group.unit>unit</test.group.unit>
    </properties>

    <!-- Plugin CONFIG -->

    <build>
        <finalName>${project.artifactId}</finalName>

        <plugins>
            <plugin>
                <!-- musst be include together with the aspectj plugin -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.source}</target>
                    <encoding>${project.build.sourceEncoding}</encoding>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.4</version>
            </plugin>

            <!-- Config for running all unit test separate from the integration tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.17</version>
                <executions>
                    <!-- Config for UNIT-Tests-->
                    <execution>
                        <id>default-test</id>
                        <!-- to override default configuration - in fact: unit tests -->
                        <configuration>
                            <skip>false</skip>
                            <excludedGroups>${test.group.integration}</excludedGroups>
                        </configuration>
                    </execution>
                    <!-- Config for INTEGRATION-Tests-->
                    <execution>
                        <id>integration</id>
                        <phase>integration-test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <skip>false</skip>
                            <groups>${test.group.integration}</groups>
                            <excludedGroups>${test.group.unit}</excludedGroups>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-release-plugin</artifactId>
                <version>2.5</version>
                <configuration>
                    <autoVersionSubmodules>true</autoVersionSubmodules>
                    <!-- config with separate branch -->
                    <!--<preparationGoals>clean scm:branch assembly:single -Dincludes=install/*.zip scm:add-->
                    <!--</preparationGoals>-->
                    <!-- config without separate branch -->
                    <preparationGoals>clean assembly:single
                        -Dincludes=install/*.zip -Dmessage="build new zipped-release for v${project.version}"
                        scm:checkin
                    </preparationGoals>
                    <goals>package</goals>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-scm-plugin</artifactId>
                <version>1.9</version>
                <configuration>
                    <!-- name for release branch -->
                    <branch>REL_${project.version}</branch>
                </configuration>
            </plugin>

        </plugins>

    </build>

    <scm>
        <!-- see jolokia sample - https://github.com/rhuss/jolokia/blob/master/pom.xml -->
        <developerConnection>scm:git:ssh://git@github.com:ConSol/sakuli.git</developerConnection>
    </scm>

    <!-- general dependencies -->
    <dependencies>
        <!-- Spring Libraries -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${dependencies.spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${dependencies.spring.version}</version>
        </dependency>
        <!-- Spring JDBC-->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${dependencies.spring.version}</version>
        </dependency>
        <!--Aspect libaries -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>${dependencies.spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${dependencies.aspectj.version}</version>
        </dependency>
        <!-- JavaConfig need this library -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${dependencies.aspectj.version}</version>
        </dependency>


        <!--MySQL Driver for DB Access -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.25</version>
        </dependency>
        <!-- Derby Driver for embedded DB -->
        <dependency>
            <groupId>org.apache.derby</groupId>
            <artifactId>derby</artifactId>
            <version>10.10.1.1</version>
        </dependency>

        <!-- log4j over maven central -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.6.6</version>
        </dependency>

        <!-- Command line tools -->
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.8</version>
        </dependency>


        <!-- Sahi Library (OpenSource Version)-->
        <!-- local libaries, included with 'install_local_lib.sh' ... the are still not available over maven central -->
        <dependency>
            <groupId>net.sf.sahi</groupId>
            <artifactId>sahi</artifactId>
            <version>4.3</version>
        </dependency>

        <dependency>
            <groupId>net.sf.sahi</groupId>
            <artifactId>ant-sahi</artifactId>
            <version>4.3</version>
        </dependency>

        <!-- Sahi API Dependencies-->
        <dependency>
            <groupId>rhino</groupId>
            <artifactId>js</artifactId>
            <version>1.7R2</version>
        </dependency>

        <!-- SikuliX-Java Library (FULL LIBRARY) - is part of the  sikuli-setup.jar-->
        <!-- well be needed for Functions like App() and so on...-->
        <!-- local libaries, included with 'install_local_lib.sh' ... the are still not available over maven central -->
        <dependency>
            <groupId>org.sikuli</groupId>
            <artifactId>SikuliX-API</artifactId>
            <version>1.0.1</version>
        </dependency>

        <!-- Testing frameworks -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${dependencies.spring.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${dependencies.testng.version}</version>
            <scope>test</scope>
        </dependency>

        <!--Mockito -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.5</version>
            <scope>test</scope>
        </dependency>

    </dependencies>



  <repositories>
    <repository>
      <!-- ConSol Labs repository holds Sahi and Sikulu dependencies -->
      <id>labs-consol</id>
      <name>ConSol* Labs Repository</name>
      <url>http://labs.consol.de/maven/repository</url>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
      <releases>
        <enabled>true</enabled>
      </releases>
    </repository>
  </repositories>
</project>
